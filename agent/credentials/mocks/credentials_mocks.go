// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/credentials (interfaces: Manager)

// Package mock_credentials is a generated GoMock package.
package mock_credentials

import (
	reflect "reflect"

	credentials "github.com/aws/amazon-ecs-agent/agent/credentials"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetTaskCredentials mocks base method
func (m *MockManager) GetTaskCredentials(arg0 string) (credentials.TaskIAMRoleCredentials, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskCredentials", arg0)
	ret0, _ := ret[0].(credentials.TaskIAMRoleCredentials)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTaskCredentials indicates an expected call of GetTaskCredentials
func (mr *MockManagerMockRecorder) GetTaskCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskCredentials", reflect.TypeOf((*MockManager)(nil).GetTaskCredentials), arg0)
}

// RemoveCredentials mocks base method
func (m *MockManager) RemoveCredentials(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCredentials", arg0)
}

// RemoveCredentials indicates an expected call of RemoveCredentials
func (mr *MockManagerMockRecorder) RemoveCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentials", reflect.TypeOf((*MockManager)(nil).RemoveCredentials), arg0)
}

// RemoveExternalCredentialsId mocks base method
func (m *MockManager) RemoveExternalCredentialsId(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveExternalCredentialsId", arg0)
}

// RemoveExternalCredentialsId indicates an expected call of RemoveExternalCredentialsId
func (mr *MockManagerMockRecorder) RemoveExternalCredentialsId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExternalCredentialsId", reflect.TypeOf((*MockManager)(nil).RemoveExternalCredentialsId), arg0)
}

// SetTaskCredentials mocks base method
func (m *MockManager) SetTaskCredentials(arg0 *credentials.TaskIAMRoleCredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskCredentials", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskCredentials indicates an expected call of SetTaskCredentials
func (mr *MockManagerMockRecorder) SetTaskCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskCredentials", reflect.TypeOf((*MockManager)(nil).SetTaskCredentials), arg0)
}

// SetTaskExternalCredentialsId mocks base method
func (m *MockManager) SetTaskExternalCredentialsId(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTaskExternalCredentialsId", arg0)
}

// SetTaskExternalCredentialsId indicates an expected call of SetTaskExternalCredentialsId
func (mr *MockManagerMockRecorder) SetTaskExternalCredentialsId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskExternalCredentialsId", reflect.TypeOf((*MockManager)(nil).SetTaskExternalCredentialsId), arg0)
}

// ValidateExternalCredentialsId mocks base method
func (m *MockManager) ValidateExternalCredentialsId(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateExternalCredentialsId", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateExternalCredentialsId indicates an expected call of ValidateExternalCredentialsId
func (mr *MockManagerMockRecorder) ValidateExternalCredentialsId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateExternalCredentialsId", reflect.TypeOf((*MockManager)(nil).ValidateExternalCredentialsId), arg0)
}
